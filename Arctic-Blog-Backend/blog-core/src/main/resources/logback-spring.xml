<?xml version="1.0" encoding="UTF-8"?>
<!--日志文件配置,debug=false设置不打印debug及以下级别的日志,scan=false关闭监测日志配置文件是否发生改变-->
<configuration scan="false" debug="false">

    <!--引入springboot默认的logback控制台打印文件-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径-->
    <property name="PROD_LOG_HOME" value="//usr//local//blog-service//log//"/>
    <property name="DEV_LOG_HOME" value="E://logs//"/>

    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />

    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <!--控制台日志， 控制台输出 -->
    <!--appender的class属性用于指定输出策略,ConsoleAppender类代表将输出结果打印到控制台-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
        </layout>
    </appender>

    <!--文件日志,按照每天生成日志文件 -->
    <!--appender的class属性用于指定输出策略,RollingFileAppender类为FileAppender的子类，其作用是滚动记录日志文件，一旦满足指定条件即会添加到下一个文件中-->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--时间滚轴策略打印日志,设置了这个属性就无需设置RollingFileAppender的file子标签了，因为这个标签设置的是固定日志名-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${PROD_LOG_HOME}\blog-logFile.%d{yyyy-MM-dd}.log</FileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
            <totalSizeCap>800MB</totalSizeCap>
        </rollingPolicy>
        <!--日志输出格式化-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!--设置日志文件以追加的方式写入文件，默认为true-->
        <append>true</append>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>50MB</MaxFileSize>

        </triggeringPolicy>
    </appender>

    <!-- Spring日志级别控制  -->
    <logger name="org.springframework" level="ERROR"/>

    <!--myibatis log configure,将其输出级别全调至info级别,避免打印大量SQL的语句-->
    <logger name="com.apache.ibatis" level="INFO"/>
    <logger name="java.sql.Connection" level="INFO"/>
    <logger name="java.sql.Statement" level="INFO"/>
    <logger name="java.sql.PreparedStatement" level="INFO"/>

    <!-- 设置日志输出级别，ref使用appender中定义的name属性作为唯一标识符,控制台和文件均为INFO级别 -->
    <root level="INFO">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="FILE"/>
    </root>
</configuration>